generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==== Enums ====

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TableStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  MAINTENANCE
}

enum Portion {
  SMALL
  MEDIUM
  LARGE
}

// ==== Core Models ====

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String // e.g., ADMIN, STAFF
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String   @unique
  address     String
  idCard      String   @unique
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Staff {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  role           String
  email          String       @unique
  address        String
  idCard         String       @unique
  phoneNumber    String       @unique
  assignedTables StaffTable[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model StaffTable {
  id         Int      @id @default(autoincrement())
  staff      Staff    @relation(fields: [staffId], references: [id])
  staffId    Int
  table      Table    @relation(fields: [tableId], references: [id])
  tableId    Int
  assignedAt DateTime @default(now())

  @@unique([staffId, tableId])
}

model Customer {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String @unique
  address     String
  idCard      String @unique
  phoneNumber String @unique

  reservations Reservation[]
  orders       Order[]
  giftCards    GiftCard[]
  loyalty      LoyaltyProgram?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id            Int           @id @default(autoincrement())
  name          String
  description   String
  chairCount    Int
  status        TableStatus
  reservations  Reservation[]
  assignedStaff StaffTable[] // âœ… Many-to-many via StaffTable
}

model Reservation {
  id          Int      @id @default(autoincrement())
  date        DateTime
  countPeople Int
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  table       Table    @relation(fields: [tableId], references: [id])
  tableId     Int
  createdAt   DateTime @default(now())
}

// ==== Food and Menu ====

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  foods       Food[]
}

model Ingredient {
  id    Int    @id @default(autoincrement())
  name  String
  foods Food[] @relation("FoodIngredients")
}

model Food {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  portion     Portion
  priceSmall  Float?
  priceMedium Float?
  priceLarge  Float?
  available   Boolean      @default(true)
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  ingredients Ingredient[] @relation("FoodIngredients")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// ==== Orders ====

model Order {
  id             Int             @id @default(autoincrement())
  date           DateTime        @default(now())
  totalAmount    Float
  status         OrderStatus     @default(PENDING)
  customer       Customer        @relation(fields: [customerId], references: [id])
  customerId     Int
  items          OrderItem[]
  giftCardUsage  GiftCardUsage?
  kitchenDisplay KitchenDisplay?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  foodName  String
  quantity  Int
  unitPrice Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ==== Loyalty, Gift Cards ====

model GiftCard {
  id         Int             @id @default(autoincrement())
  code       String          @unique
  balance    Float
  expiryDate DateTime
  isActive   Boolean         @default(true)
  customer   Customer        @relation(fields: [customerId], references: [id])
  customerId Int
  usages     GiftCardUsage[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model GiftCardUsage {
  id         Int      @id @default(autoincrement())
  giftCard   GiftCard @relation(fields: [giftCardId], references: [id])
  giftCardId Int
  usedAmount Float
  usedOn     DateTime @default(now())
  order      Order?   @relation(fields: [orderId], references: [id])
  orderId    Int?     @unique
  createdAt  DateTime @default(now())
}

model LoyaltyProgram {
  id          Int         @id @default(autoincrement())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  Int         @unique
  points      Int         @default(0)
  tier        LoyaltyTier @default(BRONZE)
  totalSpent  Float       @default(0)
  lastUpdated DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// ==== Kitchen ====

model KitchenDisplay {
  id        Int         @id @default(autoincrement())
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   Int         @unique
  status    OrderStatus @default(PENDING)
  priority  Priority    @default(NORMAL)
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}
